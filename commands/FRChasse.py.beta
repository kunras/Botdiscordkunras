from commandsample import C
from utils.find import user as U
import random, asyncio

class FRChasse(C):

	async def on_loaded(self):
		self.guilds = {}
		self.bot.sql("CREATE TABLE IF NOT EXISTS FRChasse_muniusine (location TEXT PRIMARY KEY NOT NULL UNIQUE)")
		tableName = "FRChasse_muniusine"
		requiredTables = [
			["owner_id", "INTEGER DEFAULT '0'"],
			["level", "INTEGER DEFAULT '1'"],
			["ammo", "INTEGER DEFAULT '0'"],
			["max_ammo", "INTEGER DEFAULT '5'"],
			["speed", "INTEGER DEFAULT '1'"]
		]
		retour = self.bot.sql("PRAGMA table_info('%s')" %(tableName))
		for newTable in requiredTables:
			if not newTable[0] in [x[1] for x in retour]:
				self.bot.sql("ALTER TABLE %s ADD %s %s" %(tableName, newTable[0], newTable[1]))
		
	async def on_member_join(self, member):
		for guild in self.guilds:
			self.guilds[guild] += random.randint(0,1)
		
	def guild_animals(self, guild, valeur=0):
		if not str(guild.id) in self.guilds:
			self.guilds[str(guild.id)] = 0
		if valeur != 0:
			self.guilds[str(guild.id)] += valeur
		return self.guilds[str(guild.id)]
		
	async def cmd_muniusine(self, message, *args):
		if len(args) > 0:
			pass
		else:
			await message.channel.send(""":x: **Syntaxe invalide !**

**__hpybot muniusine__**
   \~ __collect__ - collecter les munitions générés par votre usine
   \~ __info__ - obtenir des informations sur votre usine
   \~ __upgrade__ - améliorer votre usine de munitions
   \~ __buy__ - acheter une usine de munitions
""")
		
	async def cmd_armurerie(self, message, *args):
		if len(args) > 0:
			pass
		else:
			await message.channel.send(""":wave: **Bienvenue chez Dekaize ! Que pouvons-nous faire pour vous ?**

**__hpybot armurerie__**
   \~ __C'est vide par ici...__ - en construction... Revenez plus tard.
""")
		
	def chasse(self, profile, weapon):
		"""-- STATS --
• "Résistence" - résistence de l'arme
• "Précision" - précision de l'arme
• "Chance" - chance d'obtenir des lots rares
• "Dommages" - nombre de dommages que l'arme a subis
• "Indépendant" - renvoie False si l'arme a besoin de munitions pour fonctionner
----------"""
		WPResistence = weapon.get("Résistence", 0)
		WPPrecision = weapon.get("Précision", 0)
		WPLuck = weapon.get("Chance", 0)
		WPDamages = weapon.get("Dommages", 0)
		if WPDamages >= 100:
			profile.inventory.use(weapon["_id"])
			return ["**-- VOTRE ARME S'EST DÉTRUITE --**", 0]
		Estimated_Dammages = int(random.random()*100)-WPResistence
		if Estimated_Dammages < 0:
			Estimated_Dammages = 0
		weapon["Dommages"] = WPDamages + Estimated_Dammages
		Reward = None
		Estimated_Reward = random.random()*100
		Estimated_Luck = int(random.uniform(0,WPLuck/5))
		Estimated_Reward += Estimated_Luck
		print(Estimated_Reward, "a été estimé pour", profile.user.name, "dont", Estimated_Luck, "de chance...")
		Estimated_Fail = random.random()*100-WPPrecision
		if Estimated_Reward >= 0 and Estimated_Reward <= 25 and Estimated_Fail < 0:
			Reward = None
		elif Estimated_Reward > 25 and Estimated_Reward <= 45:
			Reward = ["Rat", 1]
		elif Estimated_Reward > 45 and Estimated_Reward <= 65:
			Reward = ["Oiseau", 4]
		elif Estimated_Reward > 65 and Estimated_Reward <= 85:
			Reward = ["Lapin", 7]
		elif Estimated_Reward > 85 and Estimated_Reward <= 96.5:
			Reward = ["Loup", 40]
		elif Estimated_Reward > 96.5 and Estimated_Reward <= 98.5:
			Reward = ["Renard", 122]
		elif Estimated_Reward > 98.5 and Estimated_Reward <= 99.5:
			Reward = ["Lion", 400]
		elif Estimated_Reward > 99.5:
			Reward = ["Éléphant", 800]
		else:
			Reward = random.choice([
				["Rat", 1],
				["Oiseau", 4],
				["Lapin", 7],
				["Loup", 40]
			])
			
		if Reward == None:
			return "• Vous avez raté votre coup. ¯\\\\\_(ツ)\_/¯"
		else:
			profile.inventory.edit(weapon["_id"], dict=weapon)
			profile.set_money(profile.get_money()+Reward[1])
			return "• Vous avez tué un {}. Vous remportez **{}µ**".format(Reward[0], Reward[1])
		
	async def cmd_chasse(self, message, *args):
		times = 1
		if len(args) > 0:
			if args[0].isdigit():
				times = int(args[0])
		if times == 0:
			times = 1
		UserProfile = self.bot._G.Economy.get_profile(message.author)
		UserArmes = UserProfile.inventory.get("chasse_arme")
		UserArme = None
		if len(UserArmes) > 0:
			if len(UserArmes) == 1:
				UserArme = UserArmes[0]
			else:
				msg = "Vous avez un total de "+str(len(UserArmes))+" armes dans votre inventaire. Laquelle voulez-vous choisir ?\n``Indiquez l'ID de l'arme que vous voulez utiliser.``\n\n"
				for arme in UserArmes:
					await asyncio.sleep(0)
					if len(msg) >= 1500:
						msg += "**-- LIMITE DE CARACTÈRES ATTEINTE --**"
						break
					msg += "**NOM:** {}\n**ID:** {}\n**RÉSISTENCE:** {}%\n**PRÉCISION:** {}%\n**DOMMAGES:** ~{}0%\n\n".format(
						arme.get("_name", "undefined"),
						arme.get("_id", "undefined"),
						str(arme.get("Résistence", 0)),
						str(arme.get("Précision", 0)),
						str(arme.get("Dommages", 0))[0] if arme.get("Dommages", 0) >= 10 else "0"
					)
				await message.channel.send(msg)
				def cheque(m):
					return m.author.id == message.author.id and m.channel.id == message.channel.id
				response = await self.bot.wait_for("message", check=cheque)
				if response.content.isdigit():
					for arme in UserArmes:
						if arme.get("_id", "undefined") == int(response.content):
							UserArme = arme
							break
				else:
					await message.channel.send(f"{message.author.mention}, réponse incorrecte.")
			UserMunitions = UserProfile.inventory.get("chasse_arme")
			if UserArme != None:
				if UserArme.get("Indépendant", False) == False:
					if len(UserMunitions) > 0:
						UserProfile.inventory.use(UserMunitions[0]["_id"])
					else:
						UserArme = None
						await message.channel.send(f"{message.author.mention}, vous n'avez plus de munitions.")
			if UserArme != None:
				retours = []
				for time in range(times):
					if UserArme.get("Indépendant", False) == False:
						UserMunitions = UserProfile.inventory.get("chasse_muni")
						if len(UserMunitions) > 0:
							UserProfile.inventory.use(UserMunitions[0]["_id"])
						else:
							retours.append("**-- VOUS N'AVEZ PLUS DE MUNITIONS --**")
							break
					if len("\n".join(retours)) >= 1500:
						retours.append("**-- LIMITE DE CARACTÈRES ATTEINTE, MERCI DE REÉXECUTER LA COMMANDE --**")
						break
					await asyncio.sleep(0)
					retour = self.chasse(UserProfile, UserArme)
					if retour.__class__ == list:
						retours.append(retour[0])
						if 0 in retour:
							break
					else:
						retours.append(retour)
				await message.channel.send("\n".join(retours))
		else:
			await message.channel.send(f"{message.author.mention}, vous n'avez pas d'armes approprié pour la chasse.")
		
	# async def cmd_appater(self, message, *args):
		# self.guild_info(message.guild)
		# profile = self.bot._.Economy.get_profile(message.author)
		# usr_inventory = profile.inventory.get()
		# if "appât" in usr_inventory.keys():
			# if usr_inventory["appât"]["_amount"] > 0:
				# _m = await message.channel.send("Appâtage...")
				# if profile.inventory.use("appât") == True:
					# animaux = random.randint(0,usr_inventory["appât"].get("power", 0))
					# self.guild_info(message.guild, animaux)
					# if animaux == 0:
						# await _m.edit(content="L'appâtage n'a pas l'air d'avoir fonctionné...")
					# else:
						# await _m.edit(content="Oh, les animaux se sont rapprochés !")
				# else:
					# await message.channel.send("Erreur inconnue.")
			# else:
				# await message.channel.send("Vous n'avez pas d'appâts.")
		# else:
			# await message.channel.send("Vous n'avez pas d'appâts.")
			
	# async def cmd_chasser(self, message, *args):
		# self.guild_info(message.guild)
		# user_profile = self.bot._.Economy.get_profile(message.author)
		# user_inventory = user_profile.inventory.get()
		# user_arme = None
		# user_arme_name = None
		# canPlay = False
		# armes = [
			# "fusil de chasse",
			# "couteau",
			# "pistolet",
			# "arme"
		# ]
		# for arme in armes:
			# if arme in user_inventory.keys():
				# if user_inventory[arme]["_amount"] > 0:
					# canPlay = True
					# user_arme = user_inventory[arme]
					# user_arme_name = arme
					# break
		# if not canPlay:
			# await message.channel.send("Vous ne pouvez pas chasser sans une arme.")
			# return # Stop the command
		# else:
			# if user_inventory[arme].get("indépendant", False) == False:
				# if "munitions" in user_inventory.keys():
					# if user_inventory["munitions"]["_amount"] > 0:
						# canPlay = True
					# else:
						# canPlay = False
				# else:
					# canPlay = False
			# else:
				# canPlay = True
		# if not canPlay:
			# await message.channel.send("Tu n'as pas de munitions.")
			# return # Stop the command
		# else:
			# if self.guild_info(message.guild) <= 0:
				# await message.channel.send("Aucun animal à l'horizon. Essayez de les appâter (**hpybot appater**) avec un appât !")
			# else:
				# user_profile.inventory.use("munitions")
				# user_arme_dommages = user_arme.get("dommages", 100)
				# user_profile.inventory.use(user_arme_name)
				# if user_arme_dommages >= 100:
					# await message.channel.send("Votre arme s'est cassé. ¯\\\_(ツ)\_/¯")
				# else:
					# user_arme_dommages += random.randint(0,100-user_arme.get("résistance", 0))
					# user_profile.inventory.add(user_arme_name, dict={
						# "résistance": user_arme.get("résistance", 0),
						# "dommages": user_arme_dommages,
						# "précision": user_arme.get("précision", 0),
						# "indépendant": user_arme.get("indépendant", False)
					# })
					# user_arme_precision = 100-user_arme.get("précision", 0)
					# chances_renard = user_arme_precision**2
					# chances_tigre = user_arme_precision
					# chances_chat = user_arme_precision**4
					# aleatoire = []
					# for i in range(chances_chat):
						# aleatoire.append("chat")
					# for i in range(chances_tigre):
						# aleatoire.append("tigre")
					# for i in range(chances_renard):
						# aleatoire.append("renard")
					# mort = random.choice(aleatoire)
					# if mort == "chat":
						# recompense = (-10)
					# elif mort == "renard":
						# recompense = 25
					# elif mort == "tigre":
						# recompense = 150
					# if recompense > 0:
						# recompense_text = ("WOW ! " if recompense > 100 else "")+(f"Vous recevez {recompense}µ")
					# else:
						# recompense_text = f"Vous perdez {recompense}µ"
					# await message.channel.send(f"Vous avez tué un {mort} ! "+recompense_text)
					# self.guild_info(message.guild, valeur=-1)
					# user_profile.set_money(user_profile.get_money()+recompense)
	
def load(client):
	client.add_command(FRChasse(client))